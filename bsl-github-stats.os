#Использовать strings

Перем Соединение;

Перем УникальныеПользователи;
Перем УникальныеРепо;

Функция Инициализировать()

	Соединение = Новый HTTPСоединение("https://github.com");
	
	УникальныеПользователи = Новый Соответствие;
	УникальныеРепо = Новый Соответствие;

КонецФункции

Функция ВыполнитьПоиск(СтрокаПоиска)

	СсылкаНаСтраницуРезультатов = "search?utf8=%E2%9C%93&type=Code&ref=searchresults&q=" + КодироватьСтроку(СтрокаПоиска, СпособКодированияСтроки.КодировкаURL);

	МассивТаймаутов = Новый Массив;
	МассивТаймаутов.Добавить(2000);
	МассивТаймаутов.Добавить(3000);
	МассивТаймаутов.Добавить(4000);
	СчетчикТаймаутов = 0;

	СчетчикСтраниц = 0;

	Попытка
		Пока Истина Цикл

			Сообщить("--> Загружаем и обрабатываем страницу результатов поиска по ссылке: ");
			Сообщить(СсылкаНаСтраницуРезультатов);

			СодержимоеСтраницы = ВыполнитьЗапросМетодомGET(СсылкаНаСтраницуРезультатов);
			СтруктураРезультатов = ПолучитьДанныеСтраницыРезультатов(СодержимоеСтраницы);

			Для каждого ЭлементРезультата из СтруктураРезультатов.ЭлементыРезультатаПоиска Цикл

				УникальныеПользователи[ЭлементРезультата.ИмяПользователя] = ЭлементРезультата.ИмяПользователя;
				УникальныеРепо[ЭлементРезультата.ИмяРепозитория] = ЭлементРезультата.ИмяПользователя + "/" + ЭлементРезультата.ИмяРепозитория;

			КонецЦикла;

			СсылкаНаСтраницуРезультатов = СтруктураРезультатов.СсылкаНаСледуюСтраницу;

			Если НЕ ПустаяСтрока(СсылкаНаСтраницуРезультатов) Тогда
				СчетчикСтраниц = СчетчикСтраниц + 1;
				Если СчетчикСтраниц % 8 = 0 Тогда
					Сообщить("Ждем 10 секунд...");
					Приостановить(10000);
				КонецЕсли;

				Если СчетчикТаймаутов > 2 Тогда
					СчетчикТаймаутов = 0;
				КонецЕсли;
				Приостановить(МассивТаймаутов[СчетчикТаймаутов]);
				СчетчикТаймаутов = СчетчикТаймаутов + 1;
			Иначе
				Сообщить("Получены все результаты поиска!");
				Прервать;
			КонецЕсли;

		КонецЦикла;

	Исключение 
		Сообщить(ОписаниеОшибки());
	КонецПопытки;

КонецФункции

Функция ПолучитьДанныеСтраницыРезультатов(HtmlКодСтраницы)

	ЭлементыСтраницы = СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(HtmlКодСтраницы, "class=""code-list-item");

	// Структура страницы: 
	// ... тут шапка страницы ...
	// <div id="code_search_results"> 
	// 		<div class="code-list">
	//			<div class="code-list-item code-list-item-public ">
	//				... тут содержимое элемента результатов поиска ...
	//			</div>
	//		</div>
	//		<div class="paginate-container">
	// 		... ссылки пагинации ...
	//		</div>
	// </div>
	// ...
	// Нас интересуют все элементы, начиная с первого (т.к. первый - это шапка страницы результатов поиска).

	// Отрезаем "шапку":
	ЧастиСтроки = СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(HtmlКодСтраницы, "<div class=""code-list"">");
	ЧастиСтроки = СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(ЧастиСтроки[1], "<div class=""paginate-container"">");
	// Теперь первый элемент содержит код элементов результата поиска, а второй - подвал.

	МассивРазобранныхЭлементыРезультата = Новый Массив;
	МассивЭлементовРезультата = СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(ЧастиСтроки[0], "<div class=""code-list-item");
	Для каждого HtmlКодЭлемента из МассивЭлементовРезультата Цикл
		МассивРазобранныхЭлементыРезультата.Добавить(ПолучитьДанныеРезультатаПоиска(HtmlКодЭлемента));
	КонецЦикла;

	// Из подвала извлечем ссылку на следующую страницу результатов поиска:
	// <a class="next_page" rel="next" href="/search?p=26&amp;q=%D0%9F%D1%80%D0%BE%D1%86%D0%B5%D0%B4%D1%83%D1%80%D0%B0+OR+%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%8F+OR+Procedure+OR+Function+in%3Afile+extension%3Aos&amp;ref=searchresults&amp;type=Code&amp;utf8=%E2%9C%93">Next</a>
	// Если это последняя страница, то ссылка будет:
	// <span class="next_page disabled">Next</span>
	СсылкаНаСледующуюСтраницу = "";
	Если СтрНайти(ЧастиСтроки[1], "<span class=""next_page disabled"">Next</span>") = 0 Тогда
		ПозНачалаСсылкиНаСледующуюСтраницу = СтрНайти(ЧастиСтроки[1], "<a class=""next_page"" rel=""next"" href=""/", НаправлениеПоиска.СНачала);
		ПозКонцаСсылкиНаСледующуюСтраницу = СтрНайти(ЧастиСтроки[1], ">Next</a>", НаправлениеПоиска.СНачала);
		ТэгА = Сред(ЧастиСтроки[1], ПозНачалаСсылкиНаСледующуюСтраницу, ПозКонцаСсылкиНаСледующуюСтраницу - ПозНачалаСсылкиНаСледующуюСтраницу + 1);
		// Пример:
		// <a class="next_page" rel="next" href="/search?p=26&amp;q=%D0%9F%D1%80%D0%BE%D1%86%D0%B5%D0%B4%D1%83%D1%80%D0%B0+OR+%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%8F+OR+Procedure+OR+Function+in%3Afile+extension%3Aos&amp;ref=searchresults&amp;type=Code&amp;utf8=%E2%9C%93">
		СсылкаНаСледующуюСтраницу = Сред(ТэгА, 40, СтрДлина(ТэгА) - 40 - 1);
	КонецЕсли;

	Возврат Новый Структура("ЭлементыРезультатаПоиска,СсылкаНаСледуюСтраницу", 
		МассивРазобранныхЭлементыРезультата,
		СсылкаНаСледующуюСтраницу
	);

КонецФункции

Функция ПолучитьДанныеРезультатаПоиска(HtmlКодЭлементаРезультата)

	//<div class="code-list-item code-list-item-public ">
	//    <a href="/unitpoint"><img alt="@unitpoint" class="avatar" height="28" src="https://avatars1.githubusercontent.com/u/1647314?v=3&amp;s=56" width="28"></a>
	//  <p class="title">
	//      <a href="/unitpoint/os2d-bin-win">unitpoint/os2d-bin-win</a>
	//       –
	//      <a href="/unitpoint/os2d-bin-win/blob/368444cb0930aac82dc8eb96b9f02fe5c97ab8e0/Demo/data/os2d/dump.os" title="Demo/data/os2d/dump.os">dump.os</a> <br>
	//      <span class="text-small text-muted match-count">Showing the top two matches.</span>
	//    <span class="text-small text-muted updated-at">Last indexed <relative-time datetime="2016-03-25T00:26:27Z" title="25 марта 2016 г., 3:26 GMT+3">on 25 Mar</relative-time>.</span>
	//  </p>
	//    <div class="file-box blob-wrapper">
	//      <table class="highlight">
	//      	... сниппет с фрагментом кода ...
	//      </table>
	//    </div>
	//</div>

	ПозНачалаИмениПользователя = СтрНайти(HtmlКодЭлементаРезультата, "<img alt=""@");
	ПозОкончанияИмениПользователя = СтрНайти(HtmlКодЭлементаРезультата, """ class=""avatar""");
	ИмяПользователя = Сред(HtmlКодЭлементаРезультата, ПозНачалаИмениПользователя + 11, ПозОкончанияИмениПользователя - ПозНачалаИмениПользователя - 11);
	//Сообщить("Имя пользователя: " + ИмяПользователя);

	ПозНачалаИмениРепо = СтрНайти(HtmlКодЭлементаРезультата, "<a href=""/" + ИмяПользователя + "/");
	ПозОкончанияИмениРепо = СтрНайти(HtmlКодЭлементаРезультата, """>" + ИмяПользователя + "/");
	ИмяРепозитория = Сред(HtmlКодЭлементаРезультата, 
		ПозНачалаИмениРепо + 10 + СтрДлина(ИмяПользователя) + 1, 
		ПозОкончанияИмениРепо - ПозНачалаИмениРепо - 10 - СтрДлина(ИмяПользователя) - 1
	);

	//Сообщить("Имя репозитория: " + ИмяРепозитория);

	Возврат Новый Структура("ИмяПользователя,ИмяРепозитория",
		ИмяПользователя,
		ИмяРепозитория
	);

КонецФункции

Функция ВыполнитьЗапросМетодомGET(Ресурс, ПараметрыЗапроса=Неопределено, ВремяОжиданияВМинутах=2)

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept", "text/html");
	Заголовки.Вставить("Content-Type", "text/html");

	Запрос = Новый HTTPЗапрос(Ресурс, Заголовки);

	Ответ = Соединение.Получить(Запрос);

	Если Ответ.КодСостояния = 429 Тогда
		Сообщить("Github жалуется, что мы слишком часто делаем запросы - подождем " + ВремяОжиданияВМинутах + " минут и попытаемся снова");
		Приостановить(ВремяОжиданияВМинутах * 60 * 1000);
		Возврат ВыполнитьЗапросМетодомGET(Ресурс, ПараметрыЗапроса, ВремяОжиданияВМинутах + 1); // Увеличим время ожидания
	ИначеЕсли Ответ.КодСостояния <> 200 Тогда
		ВызватьИсключение "GitHub сообщил об ошибке " + Ответ.КодСостояния  + ": " + Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли;

	Возврат Ответ.ПолучитьТелоКакСтроку();

КонецФункции

Процедура ВывестиРезультатыПоиска()
	
	Сообщить("=========================================================================");
	Сообщить("============================== ПОЛЬЗОВАТЕЛИ =============================");
	Сообщить("=========================================================================");
	Для каждого Элемент из УникальныеПользователи Цикл
		Сообщить(Элемент.Ключ);
	КонецЦикла;

	Сообщить("=========================================================================");
	Сообщить("============================== РЕПОЗИТОРИИ ==============================");
	Сообщить("=========================================================================");
	Для каждого Элемент из УникальныеРепо Цикл
		Сообщить(Элемент.Значение);
	КонецЦикла;

КонецПроцедуры

Инициализировать();
ВыполнитьПоиск("КонецПроцедуры OR КонецФункции OR КонецЦикла OR КонецЕсли EndProcedure OR EndFunction in:file extension:os");
ВыполнитьПоиск("КонецПроцедуры OR КонецФункции OR КонецЦикла OR КонецЕсли EndProcedure OR EndFunction in:file extension:bsl");
ВывестиРезультатыПоиска();